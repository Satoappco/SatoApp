"""add_kpi_goal_id_to_values

Revision ID: f2af16b64a54
Revises: cdbb7d37ad9f
Create Date: 2025-10-23 14:42:25.018099

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = 'f2af16b64a54'
down_revision = 'cdbb7d37ad9f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add column as nullable first
    op.add_column('kpi_values', sa.Column('kpi_goal_id', sa.Integer(), nullable=True))
    
    # Step 2: Attempt to match existing KPI values to goals based on campaign_id, ad_id, customer_id
    # This is a best-effort matching for existing data
    connection = op.get_bind()
    
    # Try to match existing kpi_values to kpi_goals
    result = connection.execute(sa.text("""
        UPDATE kpi_values 
        SET kpi_goal_id = kg.id
        FROM kpi_goals kg
        WHERE kpi_values.customer_id = kg.customer_id
        AND kpi_values.campaign_id = kg.campaign_id
        AND (kpi_values.ad_id = kg.ad_id OR (kpi_values.ad_id IS NULL AND kg.ad_id IS NULL))
        AND kpi_values.kpi_goal_id IS NULL
    """))
    
    # Step 3: Handle duplicate matches - keep only the first match for each goal
    # Delete duplicate kpi_values that have the same kpi_goal_id
    connection.execute(sa.text("""
        DELETE FROM kpi_values 
        WHERE id IN (
            SELECT id FROM (
                SELECT id, ROW_NUMBER() OVER (PARTITION BY kpi_goal_id ORDER BY id) as rn
                FROM kpi_values 
                WHERE kpi_goal_id IS NOT NULL
            ) t 
            WHERE rn > 1
        )
    """))
    
    # Step 4: For any remaining unmatched values, delete them since they can't be properly linked
    connection.execute(sa.text("""
        DELETE FROM kpi_values 
        WHERE kpi_goal_id IS NULL
    """))
    
    # Step 5: Make the column non-nullable
    op.alter_column('kpi_values', 'kpi_goal_id', nullable=False)
    
    # Step 6: Add constraints
    op.create_unique_constraint('uq_kpi_values_kpi_goal_id', 'kpi_values', ['kpi_goal_id'])
    op.create_foreign_key('fk_kpi_values_kpi_goal_id', 'kpi_values', 'kpi_goals', ['kpi_goal_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_kpi_values_kpi_goal_id', 'kpi_values', type_='foreignkey')
    op.drop_constraint('uq_kpi_values_kpi_goal_id', 'kpi_values', type_='unique')
    op.drop_column('kpi_values', 'kpi_goal_id')
    # ### end Alembic commands ###
